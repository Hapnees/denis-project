ОПИСАНИЕ БИБЛИОТЕК ПРОЕКТА

ОСНОВНЫЕ БИБЛИОТЕКИ

aiosqlite (0.21.0)
    - Асинхронный драйвер для работы с SQLite базой данных
    - Позволяет выполнять операции с базой данных без блокировки основного потока
    - Используется для асинхронной работы с базой данных в FastAPI
    Пример использования:
    ```python
    import aiosqlite
    
    async def get_user(user_id: int):
        async with aiosqlite.connect('database.db') as db:
            async with db.execute('SELECT * FROM users WHERE id = ?', (user_id,)) as cursor:
                return await cursor.fetchone()
    ```
    Достоинства:
    - Легковесность и простота использования
    - Полная поддержка асинхронных операций
    - Не требует отдельного сервера базы данных
    - Хорошая производительность для небольших приложений
    Недостатки:
    - Ограниченная поддержка сложных SQL-запросов
    - Не подходит для высоконагруженных систем
    - Ограничения на одновременный доступ к базе данных
    - Отсутствие встроенной поддержки репликации
    Сравнение с аналогами:
    - SQLAlchemy: Более мощный ORM, но сложнее в использовании и требует больше ресурсов
    - Django ORM: Интегрирован с Django, но менее гибкий и требует больше зависимостей
    - Peewee: Проще в использовании, но менее производительный и с меньшим набором функций
    Обоснование выбора:
    - Выбрана из-за асинхронной поддержки, что критично для FastAPI
    - Легковесность важна для проекта с парсерами
    - Простота интеграции с существующим кодом
    - Достаточная производительность для текущих задач

fastapi (0.115.12)
    - Современный веб-фреймворк для создания API
    - Основан на Starlette и Pydantic
    - Поддерживает асинхронные операции
    - Автоматически генерирует документацию API
    - Используется как основной фреймворк проекта
    Пример использования:
    ```python
    from fastapi import FastAPI, HTTPException
    from pydantic import BaseModel
    
    app = FastAPI()
    
    class Book(BaseModel):
        title: str
        author: str
        price: float
    
    @app.get("/books/{book_id}")
    async def get_book(book_id: int):
        return {"book_id": book_id, "title": "Sample Book"}
    
    @app.post("/books/")
    async def create_book(book: Book):
        return book
    ```
    Достоинства:
    - Высокая производительность
    - Автоматическая валидация данных
    - Встроенная документация API (Swagger/OpenAPI)
    - Простота создания асинхронных эндпоинтов
    - Хорошая типизация
    Недостатки:
    - Относительно новый фреймворк
    - Меньше готовых решений и примеров по сравнению с Django
    - Требует больше ручной настройки для сложных сценариев
    - Может быть избыточным для простых приложений
    Сравнение с аналогами:
    - Django: Более зрелый фреймворк с большим количеством готовых решений, но менее производительный и более тяжелый
    - Flask: Легковесный и гибкий, но требует больше ручной настройки и не имеет встроенной асинхронности
    - aiohttp: Хорошая производительность и асинхронность, но менее удобный API и нет встроенной валидации
    Обоснование выбора:
    - Выбрана из-за отличной производительности и асинхронной поддержки
    - Встроенная валидация данных через Pydantic упрощает разработку
    - Автоматическая документация API экономит время
    - Хорошая интеграция с другими библиотеками проекта

SQLAlchemy (2.0.41)
    - ORM (Object-Relational Mapping) для работы с базами данных
    - Позволяет работать с базой данных через Python-объекты
    - Поддерживает различные типы баз данных
    - Используется для определения моделей данных и выполнения запросов
    Пример использования:
    ```python
    from sqlalchemy import Column, Integer, String, create_engine
    from sqlalchemy.ext.declarative import declarative_base
    
    Base = declarative_base()
    
    class User(Base):
        __tablename__ = 'users'
        id = Column(Integer, primary_key=True)
        name = Column(String)
        email = Column(String, unique=True)
    
    # Создание таблицы
    engine = create_engine('sqlite:///database.db')
    Base.metadata.create_all(engine)
    ```
    Достоинства:
    - Мощный и гибкий ORM
    - Поддержка множества баз данных
    - Богатый набор функций
    - Хорошая документация
    - Активное сообщество
    Недостатки:
    - Сложная кривая обучения
    - Может быть избыточным для простых проектов
    - Иногда генерирует неоптимальные SQL-запросы
    - Требует больше ресурсов чем простые решения
    Сравнение с аналогами:
    - Django ORM: Проще в использовании, но менее гибкий и привязан к Django
    - Peewee: Легче в освоении, но с меньшим набором функций
    - Tortoise ORM: Хорошая асинхронная поддержка, но менее зрелый и с меньшим сообществом
    Обоснование выбора:
    - Выбрана из-за гибкости и мощности
    - Хорошая интеграция с FastAPI
    - Большое сообщество и много готовых решений
    - Поддержка сложных запросов и миграций

pydantic (2.11.4)
    - Библиотека для валидации данных и сериализации
    - Используется для проверки входных данных API
    - Автоматически генерирует документацию для моделей данных
    - Обеспечивает типизацию данных
    Пример использования:
    ```python
    from pydantic import BaseModel, EmailStr, Field
    
    class UserCreate(BaseModel):
        email: EmailStr
        password: str = Field(..., min_length=8)
        name: str = Field(..., min_length=2)
    
    # Валидация данных
    user_data = {
        "email": "user@example.com",
        "password": "secure123",
        "name": "John"
    }
    user = UserCreate(**user_data)
    ```
    Достоинства:
    - Быстрая валидация данных
    - Отличная интеграция с FastAPI
    - Поддержка сложных типов данных
    - Автоматическая генерация схем
    Недостатки:
    - Может быть избыточным для простой валидации
    - Некоторые сложные сценарии требуют дополнительной настройки
    - Ограниченная поддержка некоторых типов данных
    Сравнение с аналогами:
    - Marshmallow: Более зрелая библиотека, но менее производительная и без встроенной типизации
    - Cerberus: Проще в использовании, но с меньшим набором функций
    - Django Forms: Хорошая интеграция с Django, но менее гибкая
    Обоснование выбора:
    - Выбрана из-за отличной производительности
    - Встроенная поддержка типизации
    - Хорошая интеграция с FastAPI
    - Активное развитие и большое сообщество

uvicorn (0.34.2)
    - ASGI-сервер для запуска FastAPI приложений
    - Обеспечивает высокую производительность
    - Поддерживает асинхронные операции
    - Используется для запуска веб-сервера
    Пример использования:
    ```bash
    # Запуск сервера
    uvicorn main:app --reload --host 0.0.0.0 --port 8000
    
    # Запуск с настройками логирования
    uvicorn main:app --log-level debug --access-log
    ```
    Достоинства:
    - Высокая производительность
    - Поддержка WebSocket
    - Автоматическая перезагрузка при изменении кода
    - Простая конфигурация
    Недостатки:
    - Ограниченная поддержка некоторых протоколов
    - Может требовать дополнительной настройки для продакшена
    - Не все функции доступны в Windows
    Сравнение с аналогами:
    - Gunicorn: Более зрелый и стабильный, но менее производительный
    - Hypercorn: Хорошая поддержка HTTP/2, но менее стабильный
    - Daphne: Хорошая поддержка WebSocket, но менее производительный
    Обоснование выбора:
    - Выбрана из-за высокой производительности
    - Хорошая интеграция с FastAPI
    - Простота настройки и использования
    - Активное развитие

БИБЛИОТЕКИ ДЛЯ РАБОТЫ С ДАННЫМИ

beautifulsoup4 (4.13.4)
    - Библиотека для парсинга HTML и XML
    - Используется для извлечения данных из веб-страниц
    - Обеспечивает удобный доступ к элементам HTML
    - Применяется в парсерах для получения информации о книгах
    Пример использования:
    ```python
    from bs4 import BeautifulSoup
    import requests
    
    def parse_book_info(url):
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        
        title = soup.find('h1', class_='book-title').text
        price = soup.find('span', class_='price').text
        return {'title': title, 'price': price}
    ```
    Достоинства:
    - Простой и интуитивный API
    - Хорошая обработка некорректного HTML
    - Богатый набор методов поиска
    - Поддержка различных парсеров
    Недостатки:
    - Медленнее чем специализированные парсеры
    - Требует много памяти для больших документов
    - Может быть нестабильным при частых изменениях структуры страницы
    Сравнение с аналогами:
    - lxml: Более производительный, но сложнее в использовании
    - Scrapy: Полноценный фреймворк для парсинга, но избыточен для простых задач
    - PyQuery: Похож на jQuery, но менее функциональный
    Обоснование выбора:
    - Выбрана из-за простоты использования
    - Хорошая обработка некорректного HTML
    - Большое сообщество и много примеров
    - Достаточная производительность для текущих задач

requests (2.32.3)
    - Библиотека для выполнения HTTP-запросов
    - Используется для получения веб-страниц
    - Поддерживает различные методы HTTP
    - Применяется в парсерах для загрузки страниц с книгами
    Пример использования:
    ```python
    import requests
    
    def search_books(query):
        headers = {'User-Agent': 'Mozilla/5.0'}
        response = requests.get(
            f'https://api.example.com/books',
            params={'q': query},
            headers=headers
        )
        return response.json()
    ```
    Достоинства:
    - Простой и понятный API
    - Поддержка всех основных HTTP-методов
    - Встроенная обработка сессий и cookies
    - Хорошая обработка ошибок
    Недостатки:
    - Синхронный API (нет встроенной асинхронности)
    - Может быть медленным при множестве запросов
    - Требует дополнительной настройки для сложных сценариев
    Сравнение с аналогами:
    - aiohttp: Асинхронный, но сложнее в использовании
    - httpx: Поддерживает синхронные и асинхронные запросы, но менее стабильный
    - urllib3: Более низкоуровневый, требует больше ручной настройки
    Обоснование выбора:
    - Выбрана из-за простоты использования
    - Хорошая документация и много примеров
    - Стабильность и надежность
    - Достаточная производительность для текущих задач

БИБЛИОТЕКИ ДЛЯ БЕЗОПАСНОСТИ

bcrypt (4.3.0)
    - Библиотека для хеширования паролей
    - Использует алгоритм bcrypt
    - Обеспечивает безопасное хранение паролей
    - Применяется для хеширования паролей пользователей
    Пример использования:
    ```python
    import bcrypt
    
    def hash_password(password: str) -> str:
        salt = bcrypt.gensalt()
        return bcrypt.hashpw(password.encode(), salt)
    
    def verify_password(password: str, hashed: str) -> bool:
        return bcrypt.checkpw(password.encode(), hashed)
    ```
    Достоинства:
    - Безопасный алгоритм хеширования
    - Встроенная защита от атак перебором
    - Простой API
    - Хорошая производительность
    Недостатки:
    - Медленнее чем простые хеш-функции
    - Требует больше ресурсов
    - Ограниченная настраиваемость
    Сравнение с аналогами:
    - Argon2: Более современный и безопасный, но сложнее в использовании
    - PBKDF2: Более настраиваемый, но менее безопасный
    - scrypt: Хорошая защита от атак, но требует больше ресурсов
    Обоснование выбора:
    - Выбрана из-за проверенной безопасности
    - Простота использования
    - Хорошая производительность
    - Широкая поддержка

PyJWT (2.10.1)
    - Библиотека для работы с JWT (JSON Web Tokens)
    - Используется для создания и проверки токенов авторизации
    - Обеспечивает безопасную передачу данных
    - Применяется в системе аутентификации
    Пример использования:
    ```python
    import jwt
    from datetime import datetime, timedelta
    
    SECRET_KEY = "your-secret-key"
    
    def create_token(user_id: int) -> str:
        payload = {
            'user_id': user_id,
            'exp': datetime.utcnow() + timedelta(days=1)
        }
        return jwt.encode(payload, SECRET_KEY, algorithm='HS256')
    
    def verify_token(token: str) -> dict:
        return jwt.decode(token, SECRET_KEY, algorithms=['HS256'])
    ```
    Достоинства:
    - Поддержка всех основных алгоритмов
    - Простой API
    - Хорошая документация
    - Активное сообщество
    Недостатки:
    - Требует правильной настройки безопасности
    - Ограниченная поддержка некоторых алгоритмов
    - Может быть сложным для отладки
    Сравнение с аналогами:
    - python-jose: Более функциональный, но сложнее в использовании
    - authlib: Полноценная библиотека аутентификации, но избыточна для простых задач
    - itsdangerous: Проще в использовании, но менее функциональный
    Обоснование выбора:
    - Выбрана из-за простоты использования
    - Хорошая документация
    - Активное сообщество
    - Достаточный набор функций

БИБЛИОТЕКИ ДЛЯ РАБОТЫ С БАЗОЙ ДАННЫХ

alembic (1.15.2)
    - Инструмент для миграций базы данных
    - Позволяет управлять изменениями схемы базы данных
    - Интегрируется с SQLAlchemy
    - Используется для обновления структуры базы данных
    Пример использования:
    ```python
    # alembic/env.py
    from alembic import op
    import sqlalchemy as sa
    
    def upgrade():
        op.create_table(
            'users',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('email', sa.String(), nullable=False),
            sa.Column('password', sa.String(), nullable=False),
            sa.PrimaryKeyConstraint('id')
        )
    
    def downgrade():
        op.drop_table('users')
    ```
    Достоинства:
    - Интеграция с SQLAlchemy
    - Поддержка отката изменений
    - Автоматическая генерация миграций
    - Хорошая документация
    Недостатки:
    - Сложная настройка для некоторых баз данных
    - Может быть избыточным для простых проектов
    - Требует внимательного управления версиями
    Сравнение с аналогами:
    - Django Migrations: Проще в использовании, но привязан к Django
    - yoyo-migrations: Легче в освоении, но менее функциональный
    - SQLAlchemy-Migrate: Более старый, но менее поддерживаемый
    Обоснование выбора:
    - Выбрана из-за интеграции с SQLAlchemy
    - Хорошая поддержка отката изменений
    - Автоматическая генерация миграций
    - Активное развитие

БИБЛИОТЕКИ ДЛЯ ШАБЛОНИЗАЦИИ

Jinja2 (3.1.6)
    - Шаблонизатор для Python
    - Используется для генерации HTML-страниц
    - Поддерживает наследование шаблонов
    - Применяется для рендеринга веб-страниц
    Пример использования:
    ```python
    from jinja2 import Template
    
    template = Template("""
    <html>
        <head><title>{{ title }}</title></head>
        <body>
            <h1>{{ title }}</h1>
            {% for book in books %}
                <div class="book">
                    <h2>{{ book.title }}</h2>
                    <p>Price: {{ book.price }}</p>
                </div>
            {% endfor %}
        </body>
    </html>
    """)
    
    html = template.render(
        title="Book List",
        books=[{"title": "Book 1", "price": 100}]
    )
    ```
    Достоинства:
    - Мощный и гибкий синтаксис
    - Поддержка наследования шаблонов
    - Встроенная защита от XSS
    - Хорошая производительность
    Недостатки:
    - Сложный синтаксис для новичков
    - Может быть избыточным для простых шаблонов
    - Требует внимания к безопасности
    Сравнение с аналогами:
    - Mako: Более производительный, но менее безопасный
    - Chameleon: Более современный, но менее распространенный
    - Django Templates: Проще в использовании, но менее гибкий
    Обоснование выбора:
    - Выбрана из-за гибкости и мощности
    - Хорошая производительность
    - Встроенная защита от XSS
    - Большое сообщество

ВСПОМОГАТЕЛЬНЫЕ БИБЛИОТЕКИ

anyio (4.9.0)
    - Библиотека для асинхронного программирования
    - Обеспечивает совместимость между различными асинхронными фреймворками
    - Используется FastAPI для асинхронных операций
    Пример использования:
    ```python
    import anyio
    
    async def process_data():
        async with anyio.create_task_group() as tg:
            tg.start_soon(fetch_data, "source1")
            tg.start_soon(fetch_data, "source2")
    
    async def fetch_data(source: str):
        # Асинхронная операция
        await anyio.sleep(1)
        return f"Data from {source}"
    ```
    Достоинства:
    - Универсальный асинхронный API
    - Поддержка различных бэкендов
    - Хорошая производительность
    - Простой API
    Недостатки:
    - Относительно новая библиотека
    - Меньше примеров и документации
    - Может быть сложной для отладки
    Сравнение с аналогами:
    - asyncio: Стандартная библиотека, но менее гибкая
    - trio: Более зрелая, но менее распространенная
    - curio: Проще в использовании, но менее функциональная
    Обоснование выбора:
    - Выбрана из-за универсальности
    - Хорошая интеграция с FastAPI
    - Поддержка различных бэкендов
    - Активное развитие

БИБЛИОТЕКИ ДЛЯ СБОРКИ

pyinstaller (6.13.0)
    - Инструмент для создания исполняемых файлов
    - Позволяет упаковать Python-приложение в один файл
    - Используется для создания дистрибутива приложения
    Пример использования:
    ```bash
    # Создание одного исполняемого файла
    pyinstaller --onefile main.py
    
    # Создание директории с зависимостями
    pyinstaller --name myapp --add-data "templates:templates" main.py
    ```
    Достоинства:
    - Создание автономных приложений
    - Поддержка различных платформ
    - Гибкая конфигурация
    - Хорошая документация
    Недостатки:
    - Большой размер итогового файла
    - Медленная загрузка
    - Проблемы с некоторыми библиотеками
    - Сложная отладка
    Сравнение с аналогами:
    - cx_Freeze: Более стабильный, но менее гибкий
    - py2exe: Только для Windows, но проще в использовании
    - Nuitka: Компилирует в нативный код, но сложнее в настройке
    Обоснование выбора:
    - Выбрана из-за гибкости настройки
    - Поддержка различных платформ
    - Хорошая документация
    - Активное сообщество

ЗАВИСИМОСТИ ЗАВИСИМОСТЕЙ

cffi (1.17.1)
    - Foreign Function Interface для Python
    - Используется для вызова C-кода
    - Требуется для работы некоторых криптографических библиотек
    Пример использования:
    ```python
    from cffi import FFI
    
    ffi = FFI()
    ffi.cdef("""
        int add(int a, int b);
    """)
    
    lib = ffi.dlopen("./libexample.so")
    result = lib.add(1, 2)
    ```
    Достоинства:
    - Безопасный вызов C-кода
    - Хорошая производительность
    - Поддержка различных платформ
    - Активное развитие
    Недостатки:
    - Сложная настройка
    - Требует компилятора C
    - Может быть нестабильным
    Сравнение с аналогами:
    - ctypes: Стандартная библиотека, но менее безопасная
    - pybind11: Более современная, но сложнее в использовании
    - SWIG: Более мощная, но избыточная для простых задач
    Обоснование выбора:
    - Выбрана из-за безопасности
    - Хорошая производительность
    - Активное развитие
    - Широкая поддержка

certifi (2025.4.26)
    - Набор сертификатов для проверки SSL
    - Используется requests для безопасных HTTPS-соединений
    Пример использования:
    ```python
    import requests
    import certifi
    
    response = requests.get(
        'https://api.example.com',
        verify=certifi.where()
    )
    ```
    Достоинства:
    - Актуальные сертификаты
    - Простая интеграция
    - Надежная работа
    - Регулярные обновления
    Недостатки:
    - Большой размер
    - Требует обновлений
    - Может быть избыточным
    Сравнение с аналогами:
    - pyOpenSSL: Более гибкая, но сложнее в использовании
    - cryptography: Более мощная, но избыточная для простых задач
    - ssl: Стандартная библиотека, но требует ручного управления сертификатами
    Обоснование выбора:
    - Выбрана из-за простоты использования
    - Регулярные обновления
    - Хорошая интеграция с requests
    - Надежность

urllib3 (2.4.0)
    - HTTP-клиент
    - Используется requests для HTTP-запросов
    Пример использования:
    ```python
    import urllib3
    
    http = urllib3.PoolManager()
    response = http.request('GET', 'https://api.example.com')
    data = response.data.decode('utf-8')
    ```
    Достоинства:
    - Надежный HTTP-клиент
    - Поддержка пула соединений
    - Хорошая производительность
    - Активное развитие
    Недостатки:
    - Сложный API
    - Требует ручной настройки
    - Может быть избыточным
    Сравнение с аналогами:
    - httplib: Стандартная библиотека, но менее функциональная
    - aiohttp: Асинхронный, но сложнее в использовании
    - requests: Более высокоуровневый, но менее гибкий
    Обоснование выбора:
    - Выбрана из-за надежности
    - Хорошая производительность
    - Поддержка пула соединений
    - Активное развитие

click (8.2.0)
    - Создание CLI-интерфейсов
    - Используется для создания командной строки
    Пример использования:
    ```python
    import click
    
    @click.command()
    @click.option('--name', prompt='Your name', help='The person to greet.')
    def hello(name):
        click.echo(f'Hello {name}!')
    
    if __name__ == '__main__':
        hello()
    ```
    Достоинства:
    - Простой и понятный API
    - Автоматическая генерация help
    - Поддержка вложенных команд
    - Хорошая документация
    Недостатки:
    - Может быть избыточным для простых скриптов
    - Ограниченная кастомизация
    - Зависимость от других библиотек
    Сравнение с аналогами:
    - argparse: Стандартная библиотека, но менее удобная
    - docopt: Более декларативный, но менее гибкий
    - typer: Более современный, но менее стабильный
    Обоснование выбора:
    - Выбрана из-за простоты использования
    - Хорошая документация
    - Автоматическая генерация help
    - Активное сообщество